import unittest
from python.Grid import Grid
from python.ClassicSudoku import ClassicSudoku
import numpy as np


class TestClassic4x4(unittest.TestCase):

    def __init__(self):
        super().__init__()
        self.test = 3

    def test_analytical(self):
        g = Grid(np.array([[1, 0, 3, 0],
                           [0, 0, 2, 0],
                           [3, 1, 0, 0],
                           [0, 0, 0, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()), [1, 2, 3, 4, 4, 3, 2, 1, 3, 1, 4, 2, 2, 4, 1, 3])

    def test_notanalytical(self):
        g = Grid(np.array([[1, 0, 3, 0],
                           [0, 0, 2, 0],
                           [3, 0, 0, 0],
                           [0, 0, 0, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertEqual(solution['max_degree'], 1)
        self.assertFalse(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertListEqual(list(solution['intermediate'].flatten()), [1, 2, 3, 4, 4, 3, 2, 1, 3, 0, 0, 2, 2, 0, 0, 3])
        self.assertListEqual(list(solution['grid'].flatten()), [1, 2, 3, 4, 4, 3, 2, 1, 3, 1, 4, 2, 2, 4, 1, 3])

    def test_nosolution(self):
        g = Grid(np.array([[1, 4, 3, 0],
                           [0, 0, 2, 0],
                           [3, 1, 0, 0],
                           [0, 0, 0, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertFalse(solution['solved'])
        self.assertListEqual(list(solution['intermediate'].flatten()), [1, 4, 3, 0, 0, 3, 2, 4, 3, 1, 4, 2, 4, 2, 1, 3])
        self.assertListEqual(list(solution['grid'].flatten()), [1, 4, 3, 0, 0, 3, 2, 4, 3, 1, 4, 2, 4, 2, 1, 3])


class TestClassic6x6(unittest.TestCase):

    def test_analytical(self):
        g = Grid(np.array([[1, 0, 3, 0, 5, 0],
                           [0, 5, 2, 0, 0, 4],
                           [3, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 3, 0, 2],
                           [0, 0, 0, 0, 0, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertEqual(solution['max_degree'], 0)
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertListEqual(list(solution['grid'].flatten()), [1, 4, 3, 2, 5, 6, 6, 5, 2, 1, 3, 4, 3, 1, 6, 4, 2, 5, 4,
                                                                2, 5, 6, 1, 3, 5, 6, 1, 3, 4, 2, 2, 3, 4, 5, 6, 1])

    def test_analytical_customboxes(self):
        start_numbers = np.array([[6, 0, 3, 0, 0, 4],
                                  [0, 0, 0, 4, 0, 0],
                                  [0, 0, 0, 6, 0, 0],
                                  [0, 0, 1, 0, 0, 0],
                                  [0, 0, 4, 0, 0, 0],
                                  [3, 0, 0, 1, 0, 5]])
        g = Grid(start_numbers.copy(),
                 boxes=np.array([[1, 2, 2, 2, 3, 3],
                                 [1, 2, 2, 2, 3, 4],
                                 [1, 1, 3, 3, 3, 4],
                                 [1, 5, 5, 5, 4, 4],
                                 [1, 5, 6, 6, 6, 4],
                                 [5, 5, 6, 6, 6, 4]])
                 )
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()), [6, 5, 3, 2, 1, 4, 5, 1, 6, 4, 3, 2, 4, 3, 5, 6, 2, 1, 2,
                                                                6, 1, 5, 4, 3, 1, 2, 4, 3, 5, 6, 3, 4, 2, 1, 6, 5])

    def test_notanalytical_customboxes(self):
        start_numbers = np.array([[1, 0, 0, 0, 0, 2],
                                  [0, 2, 0, 0, 0, 0],
                                  [0, 0, 3, 0, 0, 0],
                                  [0, 0, 0, 4, 0, 0],
                                  [0, 0, 0, 0, 5, 0],
                                  [5, 0, 0, 0, 0, 4]])
        g = Grid(start_numbers.copy(),
                 boxes=np.array([[1, 1, 1, 2, 2, 2],
                                 [1, 1, 3, 3, 2, 2],
                                 [1, 3, 3, 3, 4, 2],
                                 [5, 3, 4, 4, 4, 6],
                                 [5, 5, 4, 4, 6, 6],
                                 [5, 5, 5, 6, 6, 6]])
                 )
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertFalse(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 1)
        intermediate_numbers = np.array([[1, 5, 0, 0, 0, 2],
                                         [3, 2, 0, 5, 0, 0],
                                         [0, 0, 3, 2, 0, 5],
                                         [2, 0, 5, 4, 0, 0],
                                         [0, 0, 2, 0, 5, 0],
                                         [5, 0, 0, 0, 2, 4]])
        self.assertListEqual(list(solution['intermediate'].flatten()), list(intermediate_numbers.flatten()))
        self.assertListEqual(list(solution['grid'].flatten()), [1, 5, 6, 3, 4, 2, 3, 2, 4, 5, 1, 6, 4, 1, 3, 2, 6, 5, 2,
                                                                6, 5, 4, 3, 1, 6, 4, 2, 1, 5, 3, 5, 3, 1, 6, 2, 4])


class TestClassic9x9(unittest.TestCase):

    def test_analytical(self):
        g = Grid(np.array([[5, 3, 0, 0, 7, 0, 0, 0, 0],
                           [6, 0, 0, 1, 9, 5, 0, 0, 0],
                           [0, 9, 8, 0, 0, 0, 0, 6, 0],
                           [8, 0, 0, 0, 6, 0, 0, 0, 3],
                           [4, 0, 0, 8, 0, 3, 0, 0, 1],
                           [7, 0, 0, 0, 2, 0, 0, 0, 6],
                           [0, 6, 0, 0, 0, 0, 2, 8, 0],
                           [0, 0, 0, 4, 1, 9, 0, 0, 5],
                           [0, 0, 0, 0, 8, 0, 0, 7, 9]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()), [5, 3, 4, 6, 7, 8, 9, 1, 2, 6, 7, 2, 1, 9, 5, 3, 4, 8, 1,
                                                                9, 8, 3, 4, 2, 5, 6, 7, 8, 5, 9, 7, 6, 1, 4, 2, 3, 4, 2,
                                                                6, 8, 5, 3, 7, 9, 1, 7, 1, 3, 9, 2, 4, 8, 5, 6, 9, 6, 1,
                                                                5, 3, 7, 2, 8, 4, 2, 8, 7, 4, 1, 9, 6, 3, 5, 3, 4, 5, 2,
                                                                8, 6, 1, 7, 9])

    def test_analytical_customboxes(self):
        g = Grid(np.array([[0, 0, 8, 0, 0, 0, 0, 0, 0],
                           [3, 0, 9, 8, 5, 4, 0, 0, 7],
                           [0, 0, 6, 0, 0, 0, 4, 5, 0],
                           [0, 5, 7, 0, 0, 0, 0, 4, 0],
                           [9, 0, 2, 4, 0, 0, 0, 6, 5],
                           [0, 4, 0, 0, 0, 6, 1, 0, 9],
                           [0, 0, 0, 6, 0, 0, 0, 0, 4],
                           [6, 0, 4, 5, 0, 0, 9, 8, 0],
                           [0, 0, 1, 0, 0, 3, 0, 7, 0]]),
                 np.array([[1, 1, 1, 1, 1, 2, 2, 2, 2],
                           [1, 1, 3, 3, 2, 2, 4, 4, 4],
                           [1, 1, 3, 5, 2, 2, 4, 6, 4],
                           [7, 7, 3, 5, 2, 5, 6, 6, 4],
                           [7, 3, 3, 5, 5, 5, 6, 6, 4],
                           [7, 3, 3, 5, 8, 5, 6, 4, 4],
                           [7, 3, 7, 8, 8, 5, 6, 9, 9],
                           [7, 7, 7, 8, 8, 6, 6, 9, 9],
                           [8, 8, 8, 8, 9, 9, 9, 9, 9]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()), [5, 9, 8, 1, 4, 7, 6, 2, 3, 3, 6, 9, 8, 5, 4, 2, 1, 7, 7,
                                                                2, 6, 3, 9, 1, 4, 5, 8, 1, 5, 7, 2, 8, 9, 3, 4, 6, 9, 3,
                                                                2, 4, 1, 8, 7, 6, 5, 8, 4, 5, 7, 2, 6, 1, 3, 9, 2, 1, 3,
                                                                6, 7, 5, 8, 9, 4, 6, 7, 4, 5, 3, 2, 9, 8, 1, 4, 8, 1, 9,
                                                                6, 3, 5, 7, 2])

    def test_notanalytical_difficult(self):
        g = Grid(np.array([[0, 2, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 6, 0, 0, 0, 0, 3],
                           [0, 7, 4, 0, 8, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 3, 0, 0, 2],
                           [0, 8, 0, 0, 4, 0, 0, 1, 0],
                           [6, 0, 0, 5, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0, 7, 8, 0],
                           [5, 0, 0, 0, 0, 9, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 4, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertFalse(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 3)
        self.assertListEqual(list(solution['intermediate'].flatten()), [0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
                                                                        0, 3, 0, 7, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                                        3, 0, 0, 2, 0, 8, 0, 0, 4, 0, 0, 1, 0, 6, 0, 0,
                                                                        5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 8, 0, 5,
                                                                        0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
                                                                        0])
        self.assertListEqual(list(solution['grid'].flatten()), [1, 2, 6, 4, 3, 7, 9, 5, 8, 8, 9, 5, 6, 2, 1, 4, 7, 3,
                                                                3, 7, 4, 9, 8, 5, 1, 2, 6, 4, 5, 7, 1, 9, 3, 8, 6, 2,
                                                                9, 8, 3, 2, 4, 6, 5, 1, 7, 6, 1, 2, 5, 7, 8, 3, 9, 4,
                                                                2, 6, 9, 3, 1, 4, 7, 8, 5, 5, 4, 8, 7, 6, 9, 2, 3, 1,
                                                                7, 3, 1, 8, 5, 2, 6, 4, 9])

    def test_notanalytical_difficult2(self):
        g = Grid(np.array([[1, 0, 0, 9, 0, 7, 0, 0, 3],
                           [0, 8, 0, 0, 0, 0, 0, 7, 0],
                           [0, 0, 9, 0, 0, 0, 6, 0, 0],
                           [0, 0, 7, 2, 0, 9, 4, 0, 0],
                           [4, 1, 0, 0, 0, 0, 0, 9, 5],
                           [0, 0, 8, 5, 0, 4, 3, 0, 0],
                           [0, 0, 3, 0, 0, 0, 7, 0, 0],
                           [0, 5, 0, 0, 0, 0, 0, 4, 0],
                           [2, 0, 0, 8, 0, 6, 0, 0, 9]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertFalse(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 2)
        self.assertListEqual(list(solution['intermediate'].flatten()), [1, 0, 0, 9, 0, 7, 0, 0, 3, 0, 8, 0, 0, 0, 0, 9,
                                                                        7, 0, 0, 0, 9, 0, 0, 0, 6, 0, 0, 5, 3, 7, 2, 0,
                                                                        9, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 9, 5, 0, 0, 8,
                                                                        5, 0, 4, 3, 0, 7, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0,
                                                                        5, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 8, 0, 6, 0, 3,
                                                                        9])
        self.assertListEqual(list(solution['grid'].flatten()), [1, 6, 4, 9, 5, 7, 2, 8, 3, 3, 8, 5, 6, 2, 1, 9, 7, 4, 7,
                                                                2, 9, 4, 3, 8, 6, 5, 1, 5, 3, 7, 2, 8, 9, 4, 1, 6, 4, 1,
                                                                2, 7, 6, 3, 8, 9, 5, 6, 9, 8, 5, 1, 4, 3, 2, 7, 8, 4, 3,
                                                                1, 9, 5, 7, 6, 2, 9, 5, 6, 3, 7, 2, 1, 4, 8, 2, 7, 1, 8,
                                                                4, 6, 5, 3, 9])

    @unittest.skip("Skipping very difficult 9x9 puzzle that takes over an hour")
    def test_notanalytical_very_difficult(self):
        g = Grid(np.array([[0, 0, 0, 0, 0, 5, 0, 8, 0],
                           [0, 0, 0, 6, 0, 1, 0, 4, 3],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 1, 0, 5, 0, 0, 0, 0, 0],
                           [0, 0, 0, 1, 0, 6, 0, 0, 0],
                           [3, 0, 0, 0, 0, 0, 0, 0, 5],
                           [5, 3, 0, 0, 0, 0, 0, 6, 1],
                           [0, 0, 0, 0, 0, 0, 0, 0, 4],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertFalse(solution['analytical'])
        self.assertFalse(solution['solved'])
        # self.assertEqual(solution['max_degree'], 2)

    def test_analytical_difficult(self):
        g = Grid(np.array([[0, 3, 4, 0, 0, 0, 6, 7, 0],
                           [2, 0, 0, 0, 0, 0, 0, 0, 8],
                           [1, 0, 0, 0, 4, 0, 0, 0, 9],
                           [0, 0, 0, 8, 0, 3, 0, 0, 0],
                           [0, 0, 7, 0, 0, 0, 5, 0, 0],
                           [0, 0, 0, 2, 0, 6, 0, 0, 0],
                           [3, 0, 0, 0, 1, 0, 0, 0, 5],
                           [7, 0, 0, 0, 0, 0, 0, 0, 6],
                           [0, 6, 9, 0, 0, 0, 1, 4, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()),
                             [9, 3, 4, 5, 8, 2, 6, 7, 1, 2, 7, 5, 9, 6, 1, 4, 3, 8, 1, 8, 6, 3, 4, 7, 2, 5, 9, 6, 5, 1,
                              8, 7, 3, 9, 2, 4, 8, 2, 7, 1, 9, 4, 5, 6, 3, 4, 9, 3, 2, 5, 6, 8, 1, 7, 3, 4, 2, 6, 1, 9,
                              7, 8, 5, 7, 1, 8, 4, 2, 5, 3, 9, 6, 5, 6, 9, 7, 3, 8, 1, 4, 2])


class TestClassic16x16(unittest.TestCase):

    def test_analytical_easy(self):
        g = Grid(np.array([[0, 9, 14, 6, 0, 16, 0, 10, 12, 13, 0, 0, 0, 0, 0, 0],
                           [4, 0, 12, 0, 15, 0, 8, 0, 0, 3, 0, 0, 16, 0, 0, 0],
                           [0, 11, 0, 0, 7, 4, 0, 0, 15, 0, 1, 16, 9, 3, 12, 10],
                           [16, 0, 7, 0, 0, 0, 0, 0, 2, 0, 10, 4, 0, 0, 15, 5],
                           [0, 0, 5, 14, 10, 0, 1, 11, 6, 7, 0, 0, 2, 16, 0, 0],
                           [0, 0, 3, 0, 4, 0, 5, 6, 0, 0, 0, 0, 0, 0, 13, 0],
                           [8, 13, 0, 2, 14, 15, 0, 0, 0, 11, 16, 0, 0, 0, 10, 0],
                           [0, 0, 0, 10, 3, 0, 16, 9, 5, 0, 2, 13, 11, 0, 0, 0],
                           [0, 0, 0, 4, 9, 5, 0, 13, 16, 15, 0, 7, 12, 0, 0, 0],
                           [0, 5, 0, 0, 0, 10, 14, 0, 0, 0, 12, 2, 4, 0, 3, 1],
                           [0, 16, 0, 0, 0, 0, 0, 0, 11, 1, 0, 14, 0, 13, 0, 0],
                           [0, 0, 6, 13, 0, 0, 11, 3, 4, 10, 0, 9, 7, 5, 0, 0],
                           [13, 2, 0, 0, 1, 3, 0, 14, 0, 0, 0, 0, 0, 8, 0, 12],
                           [9, 14, 1, 11, 13, 12, 0, 2, 0, 0, 6, 15, 0, 0, 4, 0],
                           [0, 0, 0, 3, 0, 0, 7, 0, 0, 16, 0, 12, 0, 9, 0, 15],
                           [0, 0, 0, 0, 0, 0, 9, 4, 7, 0, 13, 0, 1, 10, 11, 0]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()),
                             [15, 9, 14, 6, 2, 16, 3, 10, 12, 13, 7, 5, 8, 11, 1, 4, 4, 10, 12, 5, 15, 14, 8, 1, 9, 3,
                              11, 6, 16, 2, 7, 13, 2, 11, 13, 8, 7, 4, 6, 5, 15, 14, 1, 16, 9, 3, 12, 10, 16, 3, 7, 1,
                              11, 9, 13, 12, 2, 8, 10, 4, 14, 6, 15, 5, 12, 4, 5, 14, 10, 13, 1, 11, 6, 7, 15, 8, 2, 16,
                              9, 3, 11, 7, 3, 16, 4, 2, 5, 6, 14, 12, 9, 10, 15, 1, 13, 8, 8, 13, 9, 2, 14, 15, 12, 7,
                              3, 11, 16, 1, 5, 4, 10, 6, 6, 1, 15, 10, 3, 8, 16, 9, 5, 4, 2, 13, 11, 12, 14, 7, 1, 8,
                              10, 4, 9, 5, 2, 13, 16, 15, 3, 7, 12, 14, 6, 11, 7, 5, 11, 9, 8, 10, 14, 16, 13, 6, 12, 2,
                              4, 15, 3, 1, 3, 16, 2, 12, 6, 7, 4, 15, 11, 1, 5, 14, 10, 13, 8, 9, 14, 15, 6, 13, 12, 1,
                              11, 3, 4, 10, 8, 9, 7, 5, 16, 2, 13, 2, 16, 7, 1, 3, 15, 14, 10, 9, 4, 11, 6, 8, 5, 12, 9,
                              14, 1, 11, 13, 12, 10, 2, 8, 5, 6, 15, 3, 7, 4, 16, 10, 6, 4, 3, 5, 11, 7, 8, 1, 16, 14,
                              12, 13, 9, 2, 15, 5, 12, 8, 15, 16, 6, 9, 4, 7, 2, 13, 3, 1, 10, 11, 14])

    def test_analytical_hard(self):
        g = Grid(np.array([[8, 16, 0, 13, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 6],
                           [0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 12, 7, 4, 14, 0],
                           [12, 0, 4, 0, 0, 0, 14, 6, 0, 7, 0, 0, 10, 0, 5, 0],
                           [1, 0, 0, 0, 0, 0, 0, 10, 3, 0, 9, 2, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 16, 14, 0, 3, 10, 0, 0, 15, 7, 4],
                           [0, 1, 0, 6, 0, 0, 0, 13, 0, 12, 0, 0, 11, 0, 3, 0],
                           [0, 13, 0, 14, 0, 0, 6, 3, 0, 5, 0, 0, 9, 2, 0, 0],
                           [9, 0, 3, 4, 15, 0, 2, 0, 0, 0, 7, 14, 0, 0, 0, 0],
                           [0, 0, 0, 0, 5, 7, 0, 0, 0, 8, 0, 13, 3, 10, 0, 11],
                           [0, 0, 15, 2, 0, 0, 4, 0, 7, 1, 0, 0, 16, 0, 6, 0],
                           [0, 5, 0, 3, 0, 0, 8, 0, 9, 0, 0, 0, 15, 0, 13, 0],
                           [7, 10, 6, 0, 0, 13, 9, 0, 14, 15, 3, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 14, 15, 0, 4, 10, 0, 0, 0, 0, 0, 0, 2],
                           [0, 7, 0, 8, 0, 0, 13, 0, 4, 2, 0, 0, 0, 12, 0, 5],
                           [0, 2, 9, 15, 12, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0],
                           [6, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 1, 0, 8, 3]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()),
                             [8, 16, 10, 13, 1, 12, 5, 7, 15, 11, 14, 4, 2, 3, 9, 6, 3, 6, 2, 11, 8, 9, 15, 16, 1, 10,
                              5, 12, 7, 4, 14, 13, 12, 15, 4, 9, 2, 3, 14, 6, 16, 7, 13, 8, 10, 11, 5, 1, 1, 14, 5, 7,
                              13, 4, 11, 10, 3, 6, 9, 2, 12, 8, 16, 15, 2, 12, 8, 5, 9, 1, 16, 14, 11, 3, 10, 6, 13, 15,
                              7, 4, 15, 1, 16, 6, 7, 8, 10, 13, 2, 12, 4, 9, 11, 5, 3, 14, 10, 13, 7, 14, 4, 11, 6, 3,
                              8, 5, 1, 15, 9, 2, 12, 16, 9, 11, 3, 4, 15, 5, 2, 12, 13, 16, 7, 14, 8, 6, 1, 10, 4, 9,
                              14, 1, 5, 7, 12, 15, 6, 8, 16, 13, 3, 10, 2, 11, 13, 8, 15, 2, 3, 10, 4, 11, 7, 1, 12, 5,
                              16, 14, 6, 9, 16, 5, 11, 3, 6, 14, 8, 1, 9, 4, 2, 10, 15, 7, 13, 12, 7, 10, 6, 12, 16, 13,
                              9, 2, 14, 15, 3, 11, 5, 1, 4, 8, 5, 3, 12, 16, 14, 15, 1, 4, 10, 9, 8, 7, 6, 13, 11, 2,
                              11, 7, 1, 8, 10, 16, 13, 9, 4, 2, 6, 3, 14, 12, 15, 5, 14, 2, 9, 15, 12, 6, 3, 8, 5, 13,
                              11, 1, 4, 16, 10, 7, 6, 4, 13, 10, 11, 2, 7, 5, 12, 14, 15, 16, 1, 9, 8, 3])

    def test_notanalytical_veryhard(self):
        g = Grid(np.array([[6, 16, 0, 7, 0, 0, 0, 9, 14, 0, 12, 0, 4, 0, 3, 0],
                           [12, 10, 0, 8, 16, 0, 0, 0, 15, 0, 6, 3, 0, 0, 2, 13],
                           [4, 0, 1, 0, 0, 2, 0, 12, 0, 11, 0, 0, 0, 8, 0, 0],
                           [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 12, 0],
                           [0, 0, 0, 0, 9, 0, 7, 8, 0, 14, 0, 12, 0, 2, 0, 6],
                           [0, 0, 6, 0, 3, 5, 0, 0, 16, 0, 9, 0, 0, 0, 1, 0],
                           [0, 9, 16, 0, 6, 13, 0, 10, 0, 0, 11, 2, 0, 5, 0, 15],
                           [0, 8, 0, 0, 0, 0, 11, 0, 0, 1, 13, 6, 14, 10, 0, 0],
                           [0, 0, 7, 14, 11, 6, 13, 0, 0, 12, 0, 0, 0, 0, 8, 0],
                           [13, 0, 10, 0, 12, 14, 0, 0, 6, 0, 8, 16, 0, 9, 11, 0],
                           [0, 12, 0, 0, 0, 10, 0, 2, 0, 0, 15, 11, 0, 4, 0, 0],
                           [3, 0, 8, 0, 15, 0, 9, 0, 1, 5, 0, 14, 0, 0, 0, 0],
                           [0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],
                           [0, 0, 12, 0, 0, 0, 10, 0, 3, 0, 5, 0, 0, 14, 0, 16],
                           [10, 2, 0, 0, 1, 9, 0, 16, 0, 0, 0, 7, 15, 0, 5, 8],
                           [0, 6, 0, 16, 0, 12, 0, 11, 10, 0, 0, 0, 1, 0, 13, 7]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()),
                             [6, 16, 2, 7, 13, 11, 15, 9, 14, 8, 12, 5, 4, 1, 3, 10, 12, 10, 14, 8, 16, 7, 1, 5, 15, 4,
                              6, 3, 9, 11, 2, 13, 4, 3, 1, 5, 10, 2, 6, 12, 9, 11, 7, 13, 16, 8, 15, 14, 9, 15, 13, 11,
                              14, 3, 8, 4, 2, 10, 16, 1, 6, 7, 12, 5, 15, 13, 11, 10, 9, 1, 7, 8, 5, 14, 4, 12, 3, 2,
                              16, 6, 2, 7, 6, 4, 3, 5, 12, 14, 16, 15, 9, 10, 8, 13, 1, 11, 14, 9, 16, 1, 6, 13, 4, 10,
                              8, 3, 11, 2, 12, 5, 7, 15, 5, 8, 3, 12, 2, 16, 11, 15, 7, 1, 13, 6, 14, 10, 9, 4, 16, 5,
                              7, 14, 11, 6, 13, 1, 4, 12, 3, 9, 10, 15, 8, 2, 13, 4, 10, 15, 12, 14, 5, 3, 6, 2, 8, 16,
                              7, 9, 11, 1, 1, 12, 9, 6, 8, 10, 16, 2, 13, 7, 15, 11, 5, 4, 14, 3, 3, 11, 8, 2, 15, 4, 9,
                              7, 1, 5, 10, 14, 13, 16, 6, 12, 7, 14, 15, 3, 5, 8, 2, 13, 12, 16, 1, 4, 11, 6, 10, 9, 11,
                              1, 12, 9, 7, 15, 10, 6, 3, 13, 5, 8, 2, 14, 4, 16, 10, 2, 4, 13, 1, 9, 3, 16, 11, 6, 14,
                              7, 15, 12, 5, 8, 8, 6, 5, 16, 4, 12, 14, 11, 10, 9, 2, 15, 1, 3, 13, 7])


class TestClassic25x25(unittest.TestCase):

    def test_analytical_easy(self):
        g = Grid(np.array([[16, 23, 7, 0, 0, 24, 0, 4, 0, 0, 0, 10, 0, 0, 0, 1, 0, 18, 0, 0, 8, 21, 14, 0, 17],
                           [0, 0, 20, 0, 0, 19, 15, 16, 0, 0, 0, 0, 0, 5, 24, 4, 0, 2, 14, 23, 0, 0, 18, 0, 7],
                           [9, 2, 12, 0, 0, 0, 0, 0, 20, 11, 13, 0, 0, 7, 0, 0, 0, 0, 0, 6, 0, 0, 10, 25, 1],
                           [4, 0, 0, 0, 19, 0, 0, 0, 14, 0, 8, 0, 0, 23, 21, 10, 0, 9, 7, 17, 0, 0, 0, 0, 0],
                           [18, 0, 0, 0, 0, 0, 1, 17, 10, 0, 11, 15, 19, 0, 0, 12, 0, 20, 0, 0, 0, 13, 0, 0, 0],
                           [0, 7, 1, 3, 0, 0, 12, 0, 0, 0, 0, 0, 16, 0, 0, 8, 20, 11, 0, 0, 0, 0, 0, 9, 21],
                           [0, 6, 0, 10, 0, 0, 2, 21, 18, 0, 12, 19, 23, 0, 0, 0, 0, 0, 24, 16, 1, 0, 0, 14, 0],
                           [8, 20, 0, 18, 16, 11, 0, 0, 24, 0, 9, 0, 0, 0, 3, 0, 0, 0, 22, 0, 12, 0, 0, 10, 4],
                           [0, 0, 0, 0, 0, 1, 0, 0, 9, 22, 4, 0, 0, 0, 0, 0, 17, 23, 2, 0, 24, 8, 13, 0, 0],
                           [15, 21, 0, 17, 9, 8, 0, 0, 0, 0, 0, 18, 7, 2, 0, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0],
                           [0, 4, 0, 16, 0, 0, 0, 14, 0, 0, 0, 22, 0, 10, 0, 0, 11, 17, 8, 0, 21, 24, 9, 0, 0],
                           [0, 10, 11, 22, 0, 0, 0, 0, 0, 21, 24, 3, 0, 17, 1, 7, 0, 0, 18, 0, 5, 0, 0, 0, 14],
                           [0, 0, 0, 0, 17, 10, 4, 0, 0, 20, 0, 0, 0, 0, 0, 25, 0, 0, 9, 5, 16, 0, 0, 0, 0],
                           [25, 0, 0, 0, 6, 0, 16, 0, 0, 19, 14, 13, 0, 8, 9, 23, 0, 0, 0, 0, 0, 12, 4, 18, 0],
                           [0, 0, 23, 21, 20, 0, 7, 18, 13, 0, 0, 4, 0, 6, 0, 0, 0, 3, 0, 0, 0, 17, 0, 19, 0],
                           [0, 0, 10, 0, 0, 0, 0, 0, 17, 0, 0, 7, 14, 12, 0, 0, 0, 0, 0, 4, 25, 16, 0, 22, 19],
                           [0, 0, 14, 11, 13, 0, 10, 19, 12, 0, 0, 0, 0, 0, 16, 18, 15, 0, 0, 7, 0, 0, 0, 0, 0],
                           [5, 16, 0, 0, 24, 0, 14, 0, 0, 0, 17, 0, 0, 0, 11, 0, 19, 0, 0, 1, 6, 10, 0, 4, 18],
                           [0, 18, 0, 0, 3, 21, 11, 0, 0, 0, 0, 0, 6, 13, 22, 0, 25, 24, 10, 0, 0, 5, 0, 23, 0],
                           [12, 19, 0, 0, 0, 0, 0, 8, 2, 23, 0, 0, 9, 0, 0, 0, 0, 0, 6, 0, 0, 7, 15, 11, 0],
                           [0, 0, 0, 9, 0, 0, 0, 12, 0, 7, 0, 0, 10, 24, 14, 0, 5, 19, 1, 0, 0, 0, 0, 0, 13],
                           [0, 0, 0, 0, 0, 22, 23, 24, 0, 14, 21, 12, 0, 0, 17, 0, 9, 0, 0, 0, 10, 0, 0, 0, 3],
                           [23, 25, 18, 0, 0, 4, 0, 0, 0, 0, 0, 9, 0, 0, 20, 6, 24, 0, 0, 0, 0, 0, 12, 1, 16],
                           [14, 0, 19, 0, 0, 15, 3, 1, 0, 9, 7, 5, 0, 0, 0, 0, 0, 8, 11, 12, 0, 0, 17, 0, 0],
                           [11, 0, 16, 5, 1, 0, 0, 13, 0, 8, 0, 0, 0, 25, 0, 0, 0, 10, 0, 14, 0, 0, 24, 2, 23]]))
        puzzle = ClassicSudoku(grid=g)
        solution = puzzle.solve()
        self.assertTrue(solution['analytical'])
        self.assertTrue(solution['solved'])
        self.assertEqual(solution['max_degree'], 0)
        self.assertListEqual(list(solution['grid'].flatten()),
                             [16, 23, 7, 13, 15, 24, 9, 4, 25, 12, 2, 10, 22, 20, 6, 1,
                              3, 18, 19, 11, 8, 21, 14, 5, 17,
                              10, 17, 20, 6, 11, 19, 15, 16, 8, 13, 1, 25, 3, 5, 24, 4,
                              21, 2, 14, 23, 9, 22, 18, 12, 7,
                              9, 2, 12, 8, 22, 23, 21, 3, 20, 11, 13, 14, 17, 7, 18, 24,
                              16, 15, 5, 6, 19, 4, 10, 25, 1,
                              4, 1, 25, 24, 19, 2, 22, 5, 14, 18, 8, 16, 12, 23, 21, 10,
                              13, 9, 7, 17, 15, 11, 3, 6, 20,
                              18, 3, 21, 14, 5, 7, 1, 17, 10, 6, 11, 15, 19, 9, 4, 12,
                              22, 20, 25, 8, 23, 13, 16, 24, 2,
                              2, 7, 1, 3, 23, 14, 12, 6, 19, 10, 5, 24, 16, 22, 13, 8,
                              20, 11, 4, 15, 17, 18, 25, 9, 21,
                              22, 6, 4, 10, 25, 3, 2, 21, 18, 17, 12, 19, 23, 11, 8, 9,
                              7, 13, 24, 16, 1, 15, 20, 14, 5,
                              8, 20, 13, 18, 16, 11, 5, 23, 24, 15, 9, 17, 1, 14, 3, 19,
                              6, 25, 22, 21, 12, 2, 7, 10, 4,
                              19, 11, 5, 12, 14, 1, 25, 7, 9, 22, 4, 20, 21, 15, 10, 3,
                              17, 23, 2, 18, 24, 8, 13, 16, 6,
                              15, 21, 24, 17, 9, 8, 13, 20, 4, 16, 6, 18, 7, 2, 25, 5,
                              1, 14, 12, 10, 22, 23, 19, 3, 11,
                              3, 4, 2, 16, 18, 12, 6, 14, 23, 1, 15, 22, 5, 10, 19, 13,
                              11, 17, 8, 20, 21, 24, 9, 7, 25,
                              13, 10, 11, 22, 12, 9, 8, 25, 15, 21, 24, 3, 2, 17, 1, 7,
                              4, 16, 18, 19, 5, 6, 23, 20, 14,
                              24, 14, 8, 19, 17, 10, 4, 2, 3, 20, 18, 23, 11, 21, 7, 25,
                              12, 6, 9, 5, 16, 1, 22, 13, 15,
                              25, 5, 15, 7, 6, 17, 16, 11, 22, 19, 14, 13, 20, 8, 9, 23,
                              2, 1, 21, 24, 3, 12, 4, 18, 10,
                              1, 9, 23, 21, 20, 5, 7, 18, 13, 24, 16, 4, 25, 6, 12, 14,
                              10, 3, 15, 22, 2, 17, 11, 19, 8,
                              6, 15, 10, 1, 2, 18, 24, 9, 17, 3, 20, 7, 14, 12, 23, 11,
                              8, 5, 13, 4, 25, 16, 21, 22, 19,
                              21, 8, 14, 11, 13, 6, 10, 19, 12, 5, 25, 2, 24, 4, 16, 18,
                              15, 22, 23, 7, 20, 3, 1, 17, 9,
                              5, 16, 9, 23, 24, 13, 14, 22, 7, 25, 17, 21, 15, 3, 11, 2,
                              19, 12, 20, 1, 6, 10, 8, 4, 18,
                              7, 18, 17, 20, 3, 21, 11, 15, 1, 4, 19, 8, 6, 13, 22, 16,
                              25, 24, 10, 9, 14, 5, 2, 23, 12,
                              12, 19, 22, 25, 4, 16, 20, 8, 2, 23, 10, 1, 9, 18, 5, 17,
                              14, 21, 6, 3, 13, 7, 15, 11, 24,
                              17, 22, 3, 9, 8, 25, 18, 12, 16, 7, 23, 11, 10, 24, 14, 21,
                              5, 19, 1, 2, 4, 20, 6, 15, 13,
                              20, 13, 6, 2, 7, 22, 23, 24, 11, 14, 21, 12, 18, 1, 17, 15,
                              9, 4, 16, 25, 10, 19, 5, 8, 3,
                              23, 25, 18, 15, 21, 4, 17, 10, 5, 2, 22, 9, 8, 19, 20, 6,
                              24, 7, 3, 13, 11, 14, 12, 1, 16,
                              14, 24, 19, 4, 10, 15, 3, 1, 6, 9, 7, 5, 13, 16, 2, 20,
                              23, 8, 11, 12, 18, 25, 17, 21, 22,
                              11, 12, 16, 5, 1, 20, 19, 13, 21, 8, 3, 6, 4, 25, 15, 22,
                              18, 10, 17, 14, 7, 9, 24, 2, 23])
